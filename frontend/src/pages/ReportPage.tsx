import React, { useState, useCallback, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';  // <-- import useNavigate

import { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';
import '../styles/page/ReportPage.css';

const containerStyle = {
    width: '100%',
    height: '350px',
};

const defaultCenter = {
    lat: 13.736717,
    lng: 100.523186,
};

const ReportPage: React.FC = () => {
    const [type, setType] = useState('');
    const [description, setDescription] = useState('');
    const [locationText, setLocationText] = useState('');
    const [latitude, setLatitude] = useState<number | null>(null);
    const [longitude, setLongitude] = useState<number | null>(null);
    const [image, setImage] = useState<File | null>(null);
    const [loading, setLoading] = useState(false);
    const [center, setCenter] = useState<{ lat: number; lng: number }>({
        lat: 13.736717, // fallback default: Bangkok
        lng: 100.523186,
    });


    const navigate = useNavigate();  // <-- ‡πÉ‡∏ä‡πâ useNavigate

    const { isLoaded } = useJsApiLoader({
        googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '',
    });
    useEffect(() => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (pos) => {
                    const lat = pos.coords.latitude;
                    const lng = pos.coords.longitude;
                    setCenter({ lat, lng });
                    setLatitude(lat);
                    setLongitude(lng);
                },
                (err) => {
                    console.warn("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", err);
                }
            );
        }
    }, []);

    const onMapClick = useCallback((e: google.maps.MapMouseEvent) => {
        if (e.latLng) {
            const lat = e.latLng.lat();
            const lng = e.latLng.lng();
            setLatitude(lat);
            setLongitude(lng);
        }
    }, []);

    const geocodeLocation = async () => {
        const apiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;
        const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(locationText)}&key=${apiKey}`;

        try {
            const res = await axios.get(url);
            const { results } = res.data;
            if (results.length > 0) {
                const { lat, lng } = results[0].geometry.location;
                setLatitude(lat);
                setLongitude(lng);
                setCenter({ lat, lng });
            } else {
                alert('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏');
            }
        } catch (err) {
            console.error('Geocode error:', err);
            alert('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á');
        }
    };

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        const token = localStorage.getItem('token');
        if (!token) return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');

        if (!type || !description || latitude === null || longitude === null) {
            return alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó, ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà');
        }

        const actualLocationText = locationText.trim() || '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà';

        try {
            setLoading(true);
            const formData = new FormData();
            formData.append('type', type);
            formData.append('description', description);
            formData.append('locationText', actualLocationText);
            formData.append('latitude', latitude.toString());
            formData.append('longitude', longitude.toString());
            if (image) formData.append('image', image);

            const res = await axios.post(
                'http://localhost:5000/api/reports/create',
                formData,
                {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                        Authorization: `Bearer ${token}`,
                    },
                }
            );

            alert('‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.log(res.data);
            navigate('/my-reports'); // ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ

        } catch (error) {
            alert('‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            console.error(error);
        } finally {
            setLoading(false);
        }
    };


    return (
        <div className="report-container">
            <h2>üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô</h2>
            <form onSubmit={handleSubmit} className="report-form">
                <label>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏´‡∏ï‡∏∏:</label>
                <input
                    value={type}
                    onChange={(e) => setType(e.target.value)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏ü‡πÑ‡∏´‡∏°‡πâ, ‡∏à‡∏°‡∏ô‡πâ‡∏≥"
                />

                <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå:</label>
                <textarea
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                />

                <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏ (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°):</label>
                <div className="location-search">
                    <input
                        value={locationText}
                        onChange={(e) => setLocationText(e.target.value)}
                        placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢, ‡∏ö‡∏≤‡∏á‡∏ô‡∏≤, ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û"
                    />
                    <button type="button" onClick={geocodeLocation}>
                        ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                    </button>
                </div>

                <label>‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏´‡∏ï‡∏∏ (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á):</label>
                {isLoaded && (
                    <GoogleMap
                        mapContainerStyle={containerStyle}
                        center={center}
                        zoom={15}
                        onClick={onMapClick}
                    >
                        {latitude && longitude && (
                            <Marker position={{ lat: latitude, lng: longitude }} />
                        )}
                    </GoogleMap>
                )}
                <label>‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):</label>
                <input type="file" onChange={(e) => setImage(e.target.files?.[0] || null)} />

                <button type="submit" disabled={loading}>
                    {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏´‡∏ï‡∏∏'}
                </button>
            </form>
        </div>
    );
};

export default ReportPage;
