import { Request, Response } from "express";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import User from "../models/User";

// üßæ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin ‡∏î‡∏π‡πÑ‡∏î‡πâ)
export const showAllUsers = async (req: Request, res: Response): Promise<void> => {
    try {
        const users = await User.find().select("-password");
        res.status(200).json({ users });
    } catch (error) {
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', error });
    }
};

// üìù ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô (‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤/‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£)
export const register = async (req: Request, res: Response): Promise<void> => {
    const { name, phone, studentId, residence, password } = req.body;

    try {
        const existingUser = await User.findOne({ studentId });

        if (existingUser) {
            res.status(400).json({ message: 'studentId ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß' });
            return;
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        const newUser = new User({
            name,
            phone,
            studentId,
            residence,
            password: hashedPassword,
            role: 'user',
            profile_img: 'https://res.cloudinary.com/dboau6axv/image/upload/v1735641179/qa9dfyxn8spwm0nwtako.jpg',
        });

        await newUser.save();

        res.status(201).json({ message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
        console.log(`New user registered: ${JSON.stringify(newUser, null, 2)}`);
    } catch (error) {
        res.status(500).json({ message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error });
    }
};

// üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
export const login = async (req: Request, res: Response): Promise<void> => {
    const { studentId, password } = req.body;

    try {
        const user = await User.findOne({ studentId });

        if (!user) {
            res.status(400).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
            return;
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            res.status(400).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
            return;
        }

        const token = jwt.sign(
            {
                userId: user._id,
                name: user.name,
                studentId: user.studentId,
                role: user.role,
                profile_img: user.profile_img,
            },
            process.env.JWT_SECRET as string,
            { expiresIn: '30m' }
        );

        res.status(200).json({
            message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            token,
            role: user.role,
        });
    } catch (error) {
        res.status(500).json({ message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', error });
    }
};

// üîÑ ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ Token
export const renewToken = async (req: Request, res: Response): Promise<void> => {
    try {
        const authHeader = req.headers.authorization;
        if (!authHeader?.startsWith("Bearer ")) {
            res.status(401).json({ message: "Unauthorized" });
            return;
        }

        const oldToken = authHeader.split(" ")[1];
        const decoded = jwt.verify(oldToken, process.env.JWT_SECRET as string) as any;

        const newToken = jwt.sign(
            {
                userId: decoded.userId,
                name: decoded.name,
                studentId: decoded.studentId,
                role: decoded.role,
                profile_img: decoded.profile_img,
            },
            process.env.JWT_SECRET as string,
            { expiresIn: "30m" }
        );

        res.status(200).json({ token: newToken });
    } catch (err) {
        res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" });
    }
};
